{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "CloudFormation template to deploy a simple REST API backed by AWS Lambda.",
  
    "Resources": {
      "LambdaExecutionRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": { "Service": ["lambda.amazonaws.com"] },
                "Action": ["sts:AssumeRole"]
              }
            ]
          },
          "ManagedPolicyArns": [
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
          ]
        }
      },
  
      "TaskLambdaFunction": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "FunctionName": "TaskLambdaFunction",
          "Handler": "index.handler",
          "Role": { "Fn::GetAtt": ["LambdaExecutionRole", "Arn"] },
          "Runtime": "nodejs20.x",
          "Timeout": 10,
          "Code": {
            "ZipFile": {
              "Fn::Join": ["\n", [
                "exports.handler = async (event) => {",
                "  const method = event.httpMethod;",
                "  let message = '';",
                "  if (method === 'GET') message = 'GET request received';",
                "  else if (method === 'POST') message = 'POST request received';",
                "  else if (method === 'DELETE') message = 'DELETE request received';",
                "  else message = 'Unsupported method';",
                "  return { statusCode: 200, body: JSON.stringify({ message }) };",
                "};"
              ]]
            }
          }
        }
      },
  
      "ApiGateway": {
        "Type": "AWS::ApiGateway::RestApi",
        "Properties": {
          "Name": "TaskApi",
          "Description": "Simple REST API connected to Lambda via CloudFormation"
        }
      },
  
      "ApiGatewayResourceTasks": {
        "Type": "AWS::ApiGateway::Resource",
        "Properties": {
          "ParentId": { "Fn::GetAtt": ["ApiGateway", "RootResourceId"] },
          "PathPart": "tasks",
          "RestApiId": { "Ref": "ApiGateway" }
        }
      },
  
      "ApiGatewayMethodTasks": {
        "Type": "AWS::ApiGateway::Method",
        "Properties": {
          "RestApiId": { "Ref": "ApiGateway" },
          "ResourceId": { "Ref": "ApiGatewayResourceTasks" },
          "HttpMethod": "ANY",
          "AuthorizationType": "NONE",
          "Integration": {
            "Type": "AWS_PROXY",
            "IntegrationHttpMethod": "POST",
            "Uri": {
              "Fn::Sub": [
                "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TaskLambdaFunction.Arn}/invocations",
                {}
              ]
            }
          }
        }
      },
  
      "ApiGatewayDeployment": {
        "Type": "AWS::ApiGateway::Deployment",
        "DependsOn": ["ApiGatewayMethodTasks"],
        "Properties": {
          "RestApiId": { "Ref": "ApiGateway" },
          "StageName": "prod"
        }
      },
  
      "LambdaPermission": {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
          "Action": "lambda:InvokeFunction",
          "FunctionName": { "Ref": "TaskLambdaFunction" },
          "Principal": "apigateway.amazonaws.com"
        }
      }
    },
  
    "Outputs": {
      "ApiUrl": {
        "Description": "Invoke URL for the REST API",
        "Value": {
          "Fn::Join": [
            "",
            [
              "https://",
              { "Ref": "ApiGateway" },
              ".execute-api.",
              { "Ref": "AWS::Region" },
              ".amazonaws.com/prod/tasks"
            ]
          ]
        }
      }
    }
  }
  